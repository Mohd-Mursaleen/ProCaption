from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageEnhance
import numpy as np
from typing import Dict, List, Tuple, Optional, Any, Union
import requests
from io import BytesIO
from src.services.cloudinary_service import CloudinaryService
import os
from pathlib import Path
import cv2
import logging
import math
import random
import time

class CompositionService:
    def __init__(self):
        self.cloudinary = CloudinaryService()
        self.fonts_dir = Path("assets/fonts")
        self.fonts_dir.mkdir(parents=True, exist_ok=True)
        
        # Map of stylistic font names to actual font files
        self.dramatic_fonts = {
            "anton": "Anton-Regular.ttf",
            "sixcaps": "SixCaps.ttf",
            "impact": "Impact",  # System font as fallback
            "arial_bold": "Arial Bold",  # System font as fallback
            "helvetica_bold": "Helvetica Bold"  # System font as fallback
        }
        
        # 3D effect presets
        self.effect_presets = {
            "shadow": {
                "offset": (5, 5),
                "color": "#000000",
                "opacity": 0.5,
                "blur": 3
            },
            "outline": {
                "width": 2,
                "color": "#000000",
                "opacity": 1.0
            },
            "glow": {
                "color": "#FFFFFF",
                "radius": 10,
                "opacity": 0.7
            },
            "3d_depth": {
                "layers": 10,
                "angle": 45,  # degrees
                "distance": 2,
                "color_gradient": ["#333333", "#666666", "#999999"]
            }
        }

    async def _get_image_from_url(self, url: str) -> Image.Image:
        response = requests.get(url)
        return Image.open(BytesIO(response.content)).convert('RGBA')
        
    def _get_font(self, font_name: str, font_size: int) -> ImageFont.FreeTypeFont:
        """Try to load the specified font or fall back to a suitable alternative"""
        try:
            # Check if font is in our map of known fonts
            if font_name.lower() in self.dramatic_fonts:
                font_file = self.dramatic_fonts[font_name.lower()]
                
                # If it's a local file name, try to load it from our fonts directory
                if font_file.endswith('.ttf') or font_file.endswith('.otf'):
                    font_path = self.fonts_dir / font_file
                    if font_path.exists():
                        return ImageFont.truetype(str(font_path), font_size)
                
                # Otherwise assume it's a system font
                return ImageFont.truetype(font_file, font_size)
            
            # Direct font name as fallback
            return ImageFont.truetype(font_name, font_size)
        except Exception as e:
            logging.warning(f"Failed to load font {font_name}: {e}")
            # Fallback to default font
            try:
                return ImageFont.truetype("Arial", font_size)
            except:
                return ImageFont.load_default()

    def _apply_text_effects(
        self, 
        draw: ImageDraw.ImageDraw,
        text: str,
        position: Tuple[int, int],
        font: ImageFont.FreeTypeFont,
        color: str = "#FFFFFF",
        effects: Dict[str, Any] = None
    ) -> None:
        """Apply advanced text effects"""
        if effects is None:
            # Just draw normal text if no effects
            draw.text(position, text, fill=color, font=font)
            return
        
        # Extract effect parameters
        shadow = effects.get('shadow', None)
        outline = effects.get('outline', None)
        glow = effects.get('glow', None)
        depth_3d = effects.get('3d_depth', None)
        
        # Apply 3D depth effect
        if depth_3d:
            preset = self.effect_presets['3d_depth']
            layers = depth_3d.get('layers', preset['layers'])
            angle = depth_3d.get('angle', preset['angle'])
            distance = depth_3d.get('distance', preset['distance'])
            colors = depth_3d.get('colors', preset['color_gradient'])
            
            # Convert angle to radians
            angle_rad = math.radians(angle)
            
            # Draw layers from back to front
            for i in range(layers, 0, -1):
                offset_x = int(math.cos(angle_rad) * distance * i)
                offset_y = int(math.sin(angle_rad) * distance * i)
                
                # Get color for this layer (gradient or fixed)
                if isinstance(colors, list) and len(colors) > 0:
                    color_idx = min(int(i * len(colors) / layers), len(colors) - 1)
                    layer_color = colors[color_idx]
                else:
                    layer_color = colors if isinstance(colors, str) else "#666666"
                
                # Draw the layer
                draw.text(
                    (position[0] + offset_x, position[1] + offset_y),
                    text, 
                    fill=layer_color, 
                    font=font
                )
        
        # Apply glow effect
        if glow:
            preset = self.effect_presets['glow']
            glow_color = glow.get('color', preset['color'])
            glow_radius = glow.get('radius', preset['radius'])
            glow_opacity = glow.get('opacity', preset['opacity'])
            
            # Create a separate image for the glow
            glow_img = Image.new('RGBA', draw.im.size, (0, 0, 0, 0))
            glow_draw = ImageDraw.Draw(glow_img)
            
            # Draw text on glow image
            glow_draw.text(position, text, fill=glow_color, font=font)
            
            # Apply blur to create glow effect
            glow_img = glow_img.filter(ImageFilter.GaussianBlur(glow_radius))
            
            # Adjust opacity
            glow_np = np.array(glow_img)
            glow_np[:, :, 3] = (glow_np[:, :, 3] * glow_opacity).astype(np.uint8)
            
            # Composite glow underneath main text
            draw.im.paste(Image.fromarray(glow_np), (0, 0), Image.fromarray(glow_np))
        
        # Apply shadow effect
        if shadow:
            preset = self.effect_presets['shadow']
            shadow_offset = shadow.get('offset', preset['offset'])
            shadow_color = shadow.get('color', preset['color'])
            shadow_opacity = shadow.get('opacity', preset['opacity'])
            shadow_blur = shadow.get('blur', preset['blur'])
            
            # Draw shadow
            shadow_pos = (position[0] + shadow_offset[0], position[1] + shadow_offset[1])
            
            # Create separate image for shadow (easier to blur)
            shadow_img = Image.new('RGBA', draw.im.size, (0, 0, 0, 0))
            shadow_draw = ImageDraw.Draw(shadow_img)
            
            # Draw text in shadow color
            shadow_draw.text(shadow_pos, text, fill=shadow_color, font=font)
            
            # Apply blur to shadow
            if shadow_blur > 0:
                shadow_img = shadow_img.filter(ImageFilter.GaussianBlur(shadow_blur))
            
            # Adjust opacity
            shadow_np = np.array(shadow_img)
            shadow_np[:, :, 3] = (shadow_np[:, :, 3] * shadow_opacity).astype(np.uint8)
            
            # Composite shadow (underneath)
            draw.im.paste(Image.fromarray(shadow_np), (0, 0), Image.fromarray(shadow_np))
        
        # Draw outline effect
        if outline:
            preset = self.effect_presets['outline']
            outline_width = outline.get('width', preset['width'])
            outline_color = outline.get('color', preset['color'])
            
            # Draw text outline by offsetting in all directions
            for dx in range(-outline_width, outline_width+1):
                for dy in range(-outline_width, outline_width+1):
                    if dx != 0 or dy != 0:  # Skip the center (actual text)
                        draw.text(
                            (position[0] + dx, position[1] + dy),
                            text, 
                            fill=outline_color, 
                            font=font
                        )
        
        # Draw the main text on top
        draw.text(position, text, fill=color, font=font)

    def _suggest_text_positions(
        self, 
        background: Image.Image, 
        text: str,
        font: ImageFont.FreeTypeFont,
        text_size: Tuple[int, int]
    ) -> List[Dict[str, int]]:
        """Suggest optimal text positions based on background content"""
        width, height = background.size
        
        # Convert to numpy array for analysis
        bg_array = np.array(background)
        
        # Check if alpha channel exists
        has_alpha = bg_array.shape[2] == 4
        
        # Create grid of potential positions
        grid_size = 3  # 3x3 grid
        positions = []
        
        for y_idx in range(grid_size):
            for x_idx in range(grid_size):
                # Calculate position in grid
                x_pos = int(width * (x_idx + 0.5) / grid_size - text_size[0] / 2)
                y_pos = int(height * (y_idx + 0.5) / grid_size - text_size[1] / 2)
                
                # Keep within bounds
                x_pos = max(10, min(width - text_size[0] - 10, x_pos))
                y_pos = max(10, min(height - text_size[1] - 10, y_pos))
                
                # Check if this position is good (transparent or empty area)
                region = bg_array[
                    y_pos:min(y_pos + text_size[1], height), 
                    x_pos:min(x_pos + text_size[0], width)
                ]
                
                if has_alpha:
                    # Calculate average alpha (transparency)
                    avg_alpha = np.mean(region[:, :, 3]) if region.size > 0 else 0
                    
                    # If area is transparent (low alpha), it's a good candidate
                    if avg_alpha < 128:  # Less than 50% opaque
                        positions.append({"x": x_pos, "y": y_pos, "score": 255 - avg_alpha})
                else:
                    # For images without alpha, check brightness (darker areas might be better for light text)
                    avg_brightness = np.mean(region) if region.size > 0 else 0
                    positions.append({"x": x_pos, "y": y_pos, "score": 255 - avg_brightness})
        
        # Sort by score (higher is better)
        positions.sort(key=lambda p: p["score"], reverse=True)
        
        # Return top 3 positions
        return positions[:3]

    async def add_text(
        self,
        background_path: str,
        text: str,
        position: Dict[str, int],
        font_size: int = 120,  # Increased default font size for dramatic effect
        color: str = "#FFFFFF",  # Changed default to white for better visibility
        font_name: str = "Impact",  # Changed default font for dramatic effect
        effects: Dict[str, Any] = None  # New parameter for text effects
    ) -> Tuple[str, dict]:
        """Add text to a background image with options for effects"""
        # Load the background image
        if background_path.startswith('http'):
            background = await self._get_image_from_url(background_path)
        else:
            background = Image.open(background_path).convert('RGBA')
        
        # Create a drawing canvas
        canvas = background.copy()
        draw = ImageDraw.Draw(canvas)
        
        # Get the font
        font = self._get_font(font_name, font_size)
        
        # Calculate text size
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        
        # Extract position coordinates
        pos_x = position.get('x', 10)
        pos_y = position.get('y', 10)
        
        # Apply text with effects
        self._apply_text_effects(
            draw, 
            text, 
            (pos_x, pos_y), 
            font, 
            color, 
            effects
        )
        
        # Save the result
        processed_dir = Path("uploads/processed")
        processed_dir.mkdir(exist_ok=True)
        
        # Generate a unique filename based on the original path
        base_name = os.path.basename(background_path)
        base_name_without_ext = os.path.splitext(base_name)[0]
        text_path = processed_dir / f"{base_name_without_ext}_text_{int(time.time())}.png"
        
        # Save locally
        canvas.save(text_path, "PNG")
        
        # Upload to cloud storage
        cloud_url = await self.cloudinary.upload_image(str(text_path))
        
        # Return information
        return str(text_path), {
            "path": str(text_path),
            "cloud_url": cloud_url,
            "text_size": {
                "width": text_width,
                "height": text_height
            },
            "position": position,
            "image_size": {
                "width": background.width,
                "height": background.height
            }
        }

    async def add_dramatic_text(
        self,
        background_path: str,
        text: str,
        position: Dict[str, int],
        font_size: int = 150,
        color: str = "#FFFFFF",
        font_name: str = "anton",  # Default to Anton since we downloaded it
        with_period: bool = True,  # Option to add period like in examples
        effects: Dict[str, Any] = None  # Added effects parameter
    ) -> Tuple[str, dict]:
        """Add dramatic, stylized text to the background with advanced effects"""
        # Add a period if requested and not already present
        if with_period and not text.endswith('.'):
            text = text + '.'
            
        # Convert text to uppercase for more drama
        text = text.upper()
        
        # Set default effects if none provided
        if effects is None:
            effects = {
                'shadow': {
                    'offset': (6, 6),
                    'color': '#000000',
                    'opacity': 0.7,
                    'blur': 3
                },
                'outline': {
                    'width': 2,
                    'color': '#000000',
                    'opacity': 1.0
                }
            }
        
        # Call the base add_text method with our modifications
        return await self.add_text(
            background_path,
            text,
            position,
            font_size,
            color,
            font_name,
            effects
        )

    async def compose_final_image(
        self,
        background_with_text_path: str,
        foreground_path: str,
        blend_mode: str = 'normal',  # Added parameter for blend mode
        blend_opacity: float = 1.0  # Added parameter for opacity
    ) -> str:
        """Combine background with text and foreground subject"""
        # Load the images
        if background_with_text_path.startswith('http'):
            background = await self._get_image_from_url(background_with_text_path)
        else:
            background = Image.open(background_with_text_path).convert('RGBA')
        
        if foreground_path.startswith('http'):
            foreground = await self._get_image_from_url(foreground_path)
        else:
            foreground = Image.open(foreground_path).convert('RGBA')
        
        # Ensure foreground is the same size as background
        if foreground.size != background.size:
            foreground = foreground.resize(background.size, Image.LANCZOS)
        
        # Convert to numpy arrays for advanced blending
        bg_array = np.array(background)
        fg_array = np.array(foreground)
        
        # Apply opacity to foreground
        if blend_opacity < 1.0:
            # Apply to alpha channel only
            fg_array[:, :, 3] = (fg_array[:, :, 3] * blend_opacity).astype(np.uint8)
        
        # Apply blend mode
        if blend_mode != 'normal':
            # Convert to OpenCV format (BGRA)
            bg_cv = cv2.cvtColor(bg_array, cv2.COLOR_RGBA2BGRA)
            fg_cv = cv2.cvtColor(fg_array, cv2.COLOR_RGBA2BGRA)
            
            # Apply blend modes
            if blend_mode == 'multiply':
                # Create alpha masks
                alpha_fg = fg_cv[:, :, 3:4] / 255.0
                alpha_bg = bg_cv[:, :, 3:4] / 255.0
                
                # Apply multiply blend
                blended = bg_cv[:, :, :3] * fg_cv[:, :, :3] / 255.0
                
                # Calculate new alpha
                alpha_out = alpha_fg + alpha_bg * (1.0 - alpha_fg)
                
                # Combine result
                result_cv = np.zeros_like(bg_cv)
                result_cv[:, :, :3] = blended
                result_cv[:, :, 3] = (alpha_out * 255).astype(np.uint8)
                
                # Convert back to PIL format
                result_array = cv2.cvtColor(result_cv, cv2.COLOR_BGRA2RGBA)
            else:
                # Default to normal blend
                result_array = cv2.cvtColor(
                    cv2.addWeighted(bg_cv, 1, fg_cv, 1, 0), 
                    cv2.COLOR_BGRA2RGBA
                )
        else:
            # Standard alpha compositing
            alpha_fg = fg_array[:, :, 3:4] / 255.0
            alpha_bg = bg_array[:, :, 3:4] / 255.0
            
            # Calculate new alpha
            alpha_out = alpha_fg + alpha_bg * (1.0 - alpha_fg)
            alpha_out = np.clip(alpha_out, 0, 1)
            
            # Combine foreground and background based on alpha
            rgb_out = (
                fg_array[:, :, :3] * alpha_fg + 
                bg_array[:, :, :3] * alpha_bg * (1.0 - alpha_fg)
            ) / np.maximum(alpha_out, 1e-8)
            
            # Create result array
            result_array = np.zeros_like(bg_array)
            result_array[:, :, :3] = np.clip(rgb_out, 0, 255)
            result_array[:, :, 3] = (alpha_out * 255).astype(np.uint8)
        
        # Convert back to PIL
        result = Image.fromarray(result_array)
        
        # Save the result
        processed_dir = Path("uploads/processed")
        composite_path = processed_dir / f"composite_{int(time.time())}.png"
        result.save(composite_path, "PNG")
        
        # Upload to cloud storage
        cloud_url = await self.cloudinary.upload_image(str(composite_path))
        
        return cloud_url

    async def generate_font_size_previews(
        self,
        background_path: str,
        text: str,
        position: Dict[str, int],
        font_name: str = "anton"
    ) -> Tuple[List[int], Dict[str, str]]:
        """Generate previews of different font sizes for the user to choose from"""
        # Define range of font sizes to preview
        sizes = [80, 100, 120, 150, 180, 220]
        previews = {}
        
        # Generate preview for each size
        for size in sizes:
            # Add text with the specified size
            _, info = await self.add_text(
                background_path,
                text,
                position,
                font_size=size,
                font_name=font_name
            )
            
            # Store cloud URL
            previews[str(size)] = info['cloud_url']
        
        return sizes, previews

    async def suggest_text_positions(
        self,
        background_path: str,
        text: str,
        font_size: int = 120,
        font_name: str = "anton"
    ) -> List[Dict[str, int]]:
        """Suggest optimal text positions based on background content"""
        # Load the background image
        if background_path.startswith('http'):
            background = await self._get_image_from_url(background_path)
        else:
            background = Image.open(background_path).convert('RGBA')
        
        # Get the font and calculate text size
        font = self._get_font(font_name, font_size)
        
        # Create a temp drawing context to measure text
        temp_img = Image.new('RGBA', (1, 1))
        draw = ImageDraw.Draw(temp_img)
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        
        # Get position suggestions
        return self._suggest_text_positions(
            background, 
            text, 
            font, 
            (text_width, text_height)
        )

    def _get_social_media_dimensions(self, template_name: str) -> Tuple[int, int]:
        """Get dimensions for a social media template"""
        templates = {
            "instagram_post": (1080, 1080),
            "instagram_story": (1080, 1920),
            "facebook_post": (1200, 630),
            "twitter_post": (1600, 900),
            "linkedin_post": (1200, 627),
            "youtube_thumbnail": (1280, 720),
            "tiktok_video": (1080, 1920)
        }
        
        return templates.get(template_name, (1080, 1080))  # Default to square

    async def create_template(
        self,
        foreground_path: str,
        background_color: str = "#000000",
        template_name: str = "instagram_post",
        padding_percent: int = 10
    ) -> str:
        """Create a social media template with the foreground subject"""
        # Load foreground image
        if foreground_path.startswith('http'):
            foreground = await self._get_image_from_url(foreground_path)
        else:
            foreground = Image.open(foreground_path).convert('RGBA')
        
        # Get template dimensions
        width, height = self._get_social_media_dimensions(template_name)
        
        # Create background with specified color
        background = Image.new('RGBA', (width, height), background_color)
        
        # Calculate scaling to fit foreground within template
        # while maintaining aspect ratio and adding padding
        fg_width, fg_height = foreground.size
        fg_aspect = fg_width / fg_height
        
        # Calculate available space after padding
        padding_px = min(width, height) * padding_percent // 100
        avail_width = width - (2 * padding_px)
        avail_height = height - (2 * padding_px)
        
        # Scale foreground to fit available space
        if avail_width / avail_height > fg_aspect:
            # Constrained by height
            new_height = avail_height
            new_width = int(new_height * fg_aspect)
        else:
            # Constrained by width
            new_width = avail_width
            new_height = int(new_width / fg_aspect)
        
        # Resize foreground
        foreground_resized = foreground.resize((new_width, new_height), Image.LANCZOS)
        
        # Calculate position to center in template
        pos_x = (width - new_width) // 2
        pos_y = (height - new_height) // 2
        
        # Paste foreground onto background
        background.paste(foreground_resized, (pos_x, pos_y), foreground_resized)
        
        # Save result
        processed_dir = Path("uploads/processed")
        template_path = processed_dir / f"template_{template_name}_{int(time.time())}.png"
        background.save(template_path, "PNG")
        
        # Upload to cloud storage
        cloud_url = await self.cloudinary.upload_image(str(template_path))
        
        return cloud_url

    async def add_multiple_text_layers(self, background_path: str, text_layers: List['TextLayer']) -> str:
        """Add multiple text layers to a background"""
        # Load the background image
        if background_path.startswith('http'):
            background = await self._get_image_from_url(background_path)
        else:
            background = Image.open(background_path).convert('RGBA')
        
        # Create a drawing canvas
        canvas = background.copy()
        draw = ImageDraw.Draw(canvas)
        
        # Add each text layer
        for layer in text_layers:
            # Extract style information
            font_size = layer.style.get('font_size', 120)
            color = layer.style.get('color', '#FFFFFF')
            font_name = layer.style.get('font_name', 'impact')
            effects = layer.style.get('effects', None)
            
            # Get font
            font = self._get_font(font_name, font_size)
            
            # Apply text with effects
            self._apply_text_effects(
                draw, 
                layer.text, 
                (layer.position.get('x', 10), layer.position.get('y', 10)), 
                font, 
                color, 
                effects
            )
        
        # Save the result
        processed_dir = Path("uploads/processed")
        processed_dir.mkdir(exist_ok=True)
        
        # Generate a unique filename
        text_path = processed_dir / f"multilayer_text_{int(time.time())}.png"
        
        # Save locally
        canvas.save(text_path, "PNG")
        
        # Upload to cloud storage
        cloud_url = await self.cloudinary.upload_image(str(text_path))
        
        return cloud_url

class TextLayer:
    def __init__(self, text: str, position: Dict[str, int], style: Dict):
        self.text = text
        self.position = position
        self.style = style

    def to_dict(self) -> Dict[str, Any]:
        return {
            "text": self.text,
            "position": self.position,
            "style": self.style
        }